<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-11-02T18:23:50-07:00</updated><id>http://localhost:4000/</id><title type="html">Bruin Sports Analytics</title><author><name>Bruin Sports Analytics</name></author><entry><title type="html">The Kershaw-less Dodgers: A Not So Dark Time…</title><link href="http://localhost:4000/kershawless" rel="alternate" type="text/html" title="The Kershaw-less Dodgers: A Not So Dark Time…" /><published>2017-10-13T15:20:51-07:00</published><updated>2017-10-13T15:20:51-07:00</updated><id>http://localhost:4000/kershawless</id><content type="html" xml:base="http://localhost:4000/kershawless">You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

To add new posts, simply add a file in the `_posts` directory that follows the convention `YYYY-MM-DD-name-of-post.ext` and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/</content><author><name>Bruin Sports Analytics</name></author><summary type="html">You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated. To add new posts, simply add a file in the `_posts` directory that follows the convention `YYYY-MM-DD-name-of-post.ext` and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi('Tom') #=&amp;gt; prints 'Hi, Tom' to STDOUT. Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk]. [jekyll-docs]: https://jekyllrb.com/docs/home [jekyll-gh]: https://github.com/jekyll/jekyll [jekyll-talk]: https://talk.jekyllrb.com/</summary></entry><entry><title type="html">Think Twice Against ESPN Fantasy Projections</title><link href="http://localhost:4000/thinktwice" rel="alternate" type="text/html" title="Think Twice Against ESPN Fantasy Projections" /><published>2015-10-13T15:20:51-07:00</published><updated>2015-10-13T15:20:51-07:00</updated><id>http://localhost:4000/thinktwice</id><content type="html" xml:base="http://localhost:4000/thinktwice">&lt;p&gt;
    With the second week of the NFL concluding last night with a 24–10 victory for the Lions over the Giants, I decided to take a look at ESPN fantasy point projection accuracy thus far. 
    &lt;!-- end excerpt here --&gt;
    ESPN is one of the leading hosts for fantasy football leagues around the country with millions of people trusting their projections to decide which players they should start. After comparing the starting point projections for each week against the actual number of points the player earned, it looks like ESPN has to step up their game.
&lt;/p&gt;
&lt;img src =&quot;/assets/avg-error.png&quot; alt=graph&gt;
&lt;p&gt;
    Having an average error percentage of 98.54%, ESPN projections for defense thus far staggers above any other position. Week 1 especially was awful with an error percentage of 108%! It’s almost as if they are spitting out projected numbers at random! According to FiveThirtyEight, week 1 had the fewest amount of “close” games in NFL history with only 3 games decided by 7 points or fewer, so it makes sense as to why defensive points were so scattered all over the place. To hurt ESPN’s credibility to predict defensive performances further, week 2 was nearly just as bad with an error percentage of 89%. Perhaps, the NFL is trending towards becoming a lopsided league like the MLB.
&lt;/p&gt;
&lt;p&gt;
    Another interesting statistic to look at besides error percentage is ESPN’s point differential between actual and projected points.
&lt;/p&gt;
&lt;img src =&quot;https://cdn-images-1.medium.com/max/1600/1*QnSRFkUDKXHGxpBKS8o_qw.png&quot; alt=graph2&gt;
&lt;p&gt;
        Across every position besides a kicker, the point differential hovers around 5 points. For some high scoring positions like a quarter back, and some good running backs, 5 points does not have much of a difference. But, compared to lower scoring positions like defense and tight end, 5 points is precious.
&lt;/p&gt;

&lt;p&gt;
        Week 2 projection accuracy in both error percentage and point differential was better as the number of blowout games decreased. Fantasy football fans can only hope the accuracy improves each week.
&lt;/p&gt;

&lt;p&gt;
        While there are still 15 weeks left in the season, ESPN projections for defense and a tight end seem to be random guesses as to how they will perform. Surprisingly, quarterback and kicker projections seem to be a fantasy player’s best bet when deciding between who to start. So, for the average Joe fantasy player who only puts in players with a projected high amount of points, you may want to start to think twice and do some personal research!
&lt;/p&gt;

&lt;div id=&quot;cited&quot;&gt;
    &lt;p&gt;
            Data was scraped from &lt;a href = &quot;http://www.espn.com/fantasy/football/&quot;&gt;ESPN Fantasy Football&lt;/a&gt;
    &lt;/p&gt;
    &lt;p&gt;
            Fantasy Points are based off the &lt;a href = &quot;http://games.espn.com/ffl/resources/help/content?name=scoring-settings-standard&quot;&gt;PPR Standard Scoring&lt;/a&gt;
    &lt;/p&gt;
&lt;/div&gt;</content><author><name>Bruin Sports Analytics</name></author><summary type="html">With the second week of the NFL concluding last night with a 24–10 victory for the Lions over the Giants, I decided to take a look at ESPN fantasy point projection accuracy thus far.</summary></entry></feed>